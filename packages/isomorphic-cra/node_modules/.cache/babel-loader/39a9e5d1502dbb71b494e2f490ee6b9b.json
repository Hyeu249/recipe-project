{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _orderBy2 = require('lodash/orderBy');\n\nvar _orderBy3 = _interopRequireDefault(_orderBy2);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar namespace = 'menu';\n\nfunction getId(props) {\n  return props.attributeName;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, namespace + '.' + getId(props), null, function (currentRefinement) {\n    if (currentRefinement === '') {\n      return null;\n    }\n\n    return currentRefinement;\n  });\n}\n\nfunction getValue(name, props, searchState, context) {\n  var currentRefinement = getCurrentRefinement(props, searchState, context);\n  return name === currentRefinement ? '' : name;\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : '');\n\n  var resetPage = true;\n  return (0, _indexUtils.refineValue)(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return (0, _indexUtils.cleanUpValue)(searchState, context, namespace + '.' + getId(props));\n}\n\nvar sortBy = ['count:desc', 'name:asc'];\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attributeName` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attributeName - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limitMin=10] - the minimum number of diplayed items\n * @propType {number} [limitMax=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [withSearchBox=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaMenu',\n  propTypes: {\n    attributeName: _propTypes2.default.string.isRequired,\n    showMore: _propTypes2.default.bool,\n    limitMin: _propTypes2.default.number,\n    limitMax: _propTypes2.default.number,\n    defaultRefinement: _propTypes2.default.string,\n    transformItems: _propTypes2.default.func,\n    withSearchBox: _propTypes2.default.bool,\n    searchForFacetValues: _propTypes2.default.bool // @deprecated\n\n  },\n  defaultProps: {\n    showMore: false,\n    limitMin: 10,\n    limitMax: 20\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, meta, searchForFacetValuesResults) {\n    var _this = this;\n\n    var attributeName = props.attributeName,\n        showMore = props.showMore,\n        limitMin = props.limitMin,\n        limitMax = props.limitMax;\n    var limit = showMore ? limitMax : limitMin;\n    var results = (0, _indexUtils.getResults)(searchResults, this.context);\n    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attributeName));\n    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attributeName] && searchForFacetValuesResults.query !== '');\n    var withSearchBox = props.withSearchBox || props.searchForFacetValues;\n\n    if (process.env.NODE_ENV === 'development' && props.searchForFacetValues) {\n      // eslint-disable-next-line no-console\n      console.warn('react-instantsearch: `searchForFacetValues` has been renamed to' + '`withSearchBox`, this will break in the next major version.');\n    } // Search For Facet Values is not available with derived helper (used for multi index search)\n\n\n    if (props.withSearchBox && this.context.multiIndexContext) {\n      throw new Error('react-instantsearch: searching in *List is not available when used inside a' + ' multi index context');\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, this.context),\n        isFromSearch: isFromSearch,\n        withSearchBox: withSearchBox,\n        canRefine: canRefine\n      };\n    }\n\n    var items = isFromSearch ? searchForFacetValuesResults[attributeName].map(function (v) {\n      return {\n        label: v.value,\n        value: getValue(v.value, props, searchState, _this.context),\n        _highlightResult: {\n          label: {\n            value: v.highlighted\n          }\n        },\n        count: v.count,\n        isRefined: v.isRefined\n      };\n    }) : results.getFacetValues(attributeName, {\n      sortBy: sortBy\n    }).map(function (v) {\n      return {\n        label: v.name,\n        value: getValue(v.name, props, searchState, _this.context),\n        count: v.count,\n        isRefined: v.isRefined\n      };\n    });\n    var sortedItems = withSearchBox && !isFromSearch ? (0, _orderBy3.default)(items, ['isRefined', 'count', 'label'], ['desc', 'desc', 'asc']) : items;\n    var transformedItems = props.transformItems ? props.transformItems(sortedItems) : sortedItems;\n    return {\n      items: transformedItems.slice(0, limit),\n      currentRefinement: getCurrentRefinement(props, searchState, this.context),\n      isFromSearch: isFromSearch,\n      withSearchBox: withSearchBox,\n      canRefine: items.length > 0\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  searchForFacetValues: function searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attributeName,\n      query: nextRefinement\n    };\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attributeName = props.attributeName,\n        showMore = props.showMore,\n        limitMin = props.limitMin,\n        limitMax = props.limitMax;\n    var limit = showMore ? limitMax : limitMin;\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, limit)\n    });\n    searchParameters = searchParameters.addDisjunctiveFacet(attributeName);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(attributeName, currentRefinement);\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this2 = this;\n\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      id: id,\n      index: (0, _indexUtils.getIndex)(this.context),\n      items: currentRefinement === null ? [] : [{\n        label: props.attributeName + ': ' + currentRefinement,\n        attributeName: props.attributeName,\n        value: function value(nextState) {\n          return _refine(props, nextState, '', _this2.context);\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","map":{"version":3,"sources":["/home/tht-hieu/Desktop/isomorphic-all/node_modules/react-instantsearch/src/connectors/connectMenu.js"],"names":["Object","defineProperty","exports","value","_orderBy2","require","_orderBy3","_interopRequireDefault","_propTypes","_propTypes2","_createConnector","_createConnector2","_indexUtils","obj","__esModule","default","_defineProperty","key","enumerable","configurable","writable","namespace","getId","props","attributeName","getCurrentRefinement","searchState","context","getCurrentRefinementValue","currentRefinement","getValue","name","_refine","nextRefinement","id","nextValue","resetPage","refineValue","_cleanUp","cleanUpValue","sortBy","displayName","propTypes","string","isRequired","showMore","bool","limitMin","number","limitMax","defaultRefinement","transformItems","func","withSearchBox","searchForFacetValues","defaultProps","getProvidedProps","searchResults","meta","searchForFacetValuesResults","_this","limit","results","getResults","canRefine","Boolean","getFacetByName","isFromSearch","query","process","env","NODE_ENV","console","warn","multiIndexContext","Error","items","map","v","label","_highlightResult","highlighted","count","isRefined","getFacetValues","sortedItems","transformedItems","slice","length","refine","facetName","cleanUp","getSearchParameters","searchParameters","setQueryParameters","maxValuesPerFacet","Math","max","addDisjunctiveFacet","addDisjunctiveFacetRefinement","getMetadata","_this2","index","getIndex","nextState"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _orderBy2 = require('lodash/orderBy');\n\nvar _orderBy3 = _interopRequireDefault(_orderBy2);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar namespace = 'menu';\n\nfunction getId(props) {\n  return props.attributeName;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, namespace + '.' + getId(props), null, function (currentRefinement) {\n    if (currentRefinement === '') {\n      return null;\n    }\n    return currentRefinement;\n  });\n}\n\nfunction getValue(name, props, searchState, context) {\n  var currentRefinement = getCurrentRefinement(props, searchState, context);\n  return name === currentRefinement ? '' : name;\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : '');\n  var resetPage = true;\n  return (0, _indexUtils.refineValue)(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return (0, _indexUtils.cleanUpValue)(searchState, context, namespace + '.' + getId(props));\n}\n\nvar sortBy = ['count:desc', 'name:asc'];\n\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attributeName` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attributeName - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limitMin=10] - the minimum number of diplayed items\n * @propType {number} [limitMax=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [withSearchBox=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaMenu',\n\n  propTypes: {\n    attributeName: _propTypes2.default.string.isRequired,\n    showMore: _propTypes2.default.bool,\n    limitMin: _propTypes2.default.number,\n    limitMax: _propTypes2.default.number,\n    defaultRefinement: _propTypes2.default.string,\n    transformItems: _propTypes2.default.func,\n    withSearchBox: _propTypes2.default.bool,\n    searchForFacetValues: _propTypes2.default.bool // @deprecated\n  },\n\n  defaultProps: {\n    showMore: false,\n    limitMin: 10,\n    limitMax: 20\n  },\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, meta, searchForFacetValuesResults) {\n    var _this = this;\n\n    var attributeName = props.attributeName,\n        showMore = props.showMore,\n        limitMin = props.limitMin,\n        limitMax = props.limitMax;\n\n    var limit = showMore ? limitMax : limitMin;\n    var results = (0, _indexUtils.getResults)(searchResults, this.context);\n\n    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attributeName));\n\n    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attributeName] && searchForFacetValuesResults.query !== '');\n    var withSearchBox = props.withSearchBox || props.searchForFacetValues;\n    if (process.env.NODE_ENV === 'development' && props.searchForFacetValues) {\n      // eslint-disable-next-line no-console\n      console.warn('react-instantsearch: `searchForFacetValues` has been renamed to' + '`withSearchBox`, this will break in the next major version.');\n    }\n    // Search For Facet Values is not available with derived helper (used for multi index search)\n    if (props.withSearchBox && this.context.multiIndexContext) {\n      throw new Error('react-instantsearch: searching in *List is not available when used inside a' + ' multi index context');\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, this.context),\n        isFromSearch: isFromSearch,\n        withSearchBox: withSearchBox,\n        canRefine: canRefine\n      };\n    }\n\n    var items = isFromSearch ? searchForFacetValuesResults[attributeName].map(function (v) {\n      return {\n        label: v.value,\n        value: getValue(v.value, props, searchState, _this.context),\n        _highlightResult: { label: { value: v.highlighted } },\n        count: v.count,\n        isRefined: v.isRefined\n      };\n    }) : results.getFacetValues(attributeName, { sortBy: sortBy }).map(function (v) {\n      return {\n        label: v.name,\n        value: getValue(v.name, props, searchState, _this.context),\n        count: v.count,\n        isRefined: v.isRefined\n      };\n    });\n\n    var sortedItems = withSearchBox && !isFromSearch ? (0, _orderBy3.default)(items, ['isRefined', 'count', 'label'], ['desc', 'desc', 'asc']) : items;\n    var transformedItems = props.transformItems ? props.transformItems(sortedItems) : sortedItems;\n    return {\n      items: transformedItems.slice(0, limit),\n      currentRefinement: getCurrentRefinement(props, searchState, this.context),\n      isFromSearch: isFromSearch,\n      withSearchBox: withSearchBox,\n      canRefine: items.length > 0\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  searchForFacetValues: function searchForFacetValues(props, searchState, nextRefinement) {\n    return { facetName: props.attributeName, query: nextRefinement };\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attributeName = props.attributeName,\n        showMore = props.showMore,\n        limitMin = props.limitMin,\n        limitMax = props.limitMax;\n\n    var limit = showMore ? limitMax : limitMin;\n\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, limit)\n    });\n\n    searchParameters = searchParameters.addDisjunctiveFacet(attributeName);\n\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(attributeName, currentRefinement);\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this2 = this;\n\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      id: id,\n      index: (0, _indexUtils.getIndex)(this.context),\n      items: currentRefinement === null ? [] : [{\n        label: props.attributeName + ': ' + currentRefinement,\n        attributeName: props.attributeName,\n        value: function value(nextState) {\n          return _refine(props, nextState, '', _this2.context);\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});"]},"metadata":{},"sourceType":"script"}