{"ast":null,"code":"import Fuse from 'fuse.js';\nexport const filterProjects = (boards = {}, searchText = '') => {\n  if (searchText !== '') {\n    let boardLists = Object.values(boards);\n    let fuse = new Fuse(boardLists, {\n      shouldSort: true,\n      threshold: 0.6,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      minMatchCharLength: 1,\n      keys: ['title']\n    });\n    let results = fuse.search(searchText);\n    const filteredBoards = results.map(result => result.item).reduce((newBoards, board) => {\n      newBoards[board.id] = board;\n      return newBoards;\n    }, {});\n    return filteredBoards;\n  }\n\n  return boards;\n};","map":{"version":3,"sources":["/home/tht-hieu/Desktop/isomorphic-all/shared/library/helpers/filterProjects.js"],"names":["Fuse","filterProjects","boards","searchText","boardLists","Object","values","fuse","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","results","search","filteredBoards","map","result","item","reduce","newBoards","board","id"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAM,GAAG,EAAV,EAAcC,UAAU,GAAG,EAA3B,KAAkC;AAC9D,MAAIA,UAAU,KAAK,EAAnB,EAAuB;AACrB,QAAIC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcJ,MAAd,CAAjB;AACA,QAAIK,IAAI,GAAG,IAAIP,IAAJ,CAASI,UAAT,EAAqB;AAC9BI,MAAAA,UAAU,EAAE,IADkB;AAE9BC,MAAAA,SAAS,EAAE,GAFmB;AAG9BC,MAAAA,QAAQ,EAAE,CAHoB;AAI9BC,MAAAA,QAAQ,EAAE,GAJoB;AAK9BC,MAAAA,gBAAgB,EAAE,EALY;AAM9BC,MAAAA,kBAAkB,EAAE,CANU;AAO9BC,MAAAA,IAAI,EAAE,CAAC,OAAD;AAPwB,KAArB,CAAX;AASA,QAAIC,OAAO,GAAGR,IAAI,CAACS,MAAL,CAAYb,UAAZ,CAAd;AACA,UAAMc,cAAc,GAAGF,OAAO,CAC3BG,GADoB,CACfC,MAAD,IAAYA,MAAM,CAACC,IADH,EAEpBC,MAFoB,CAEb,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AAC5BD,MAAAA,SAAS,CAACC,KAAK,CAACC,EAAP,CAAT,GAAsBD,KAAtB;AACA,aAAOD,SAAP;AACD,KALoB,EAKlB,EALkB,CAAvB;AAMA,WAAOL,cAAP;AACD;;AAED,SAAOf,MAAP;AACD,CAvBM","sourcesContent":["import Fuse from 'fuse.js';\n\nexport const filterProjects = (boards = {}, searchText = '') => {\n  if (searchText !== '') {\n    let boardLists = Object.values(boards);\n    let fuse = new Fuse(boardLists, {\n      shouldSort: true,\n      threshold: 0.6,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      minMatchCharLength: 1,\n      keys: ['title'],\n    });\n    let results = fuse.search(searchText);\n    const filteredBoards = results\n      .map((result) => result.item)\n      .reduce((newBoards, board) => {\n        newBoards[board.id] = board;\n        return newBoards;\n      }, {});\n    return filteredBoards;\n  }\n\n  return boards;\n};\n"]},"metadata":{},"sourceType":"module"}