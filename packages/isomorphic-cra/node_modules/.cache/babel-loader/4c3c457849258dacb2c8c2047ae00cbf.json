{"ast":null,"code":"import \"antd/es/tree/style/css\";\nimport _Tree from \"antd/es/tree\";\nvar _jsxFileName = \"/home/tht-hieu/Desktop/template-copy/shared/containers/UIElements/Tree/AsyncTree.js\";\nimport React, { useState } from 'react';\nconst {\n  TreeNode\n} = _Tree;\nconst initTreeDate = [{\n  title: 'Expand to load',\n  key: '0'\n}, {\n  title: 'Expand to load',\n  key: '1'\n}, {\n  title: 'Tree Node',\n  key: '2',\n  isLeaf: true\n}]; // It's just a simple demo. You can use tree map to optimize update perf.\n\nfunction updateTreeData(list, key, children) {\n  return list.map(node => {\n    if (node.key === key) {\n      return { ...node,\n        children\n      };\n    }\n\n    if (node.children) {\n      return { ...node,\n        children: updateTreeData(node.children, key, children)\n      };\n    }\n\n    return node;\n  });\n}\n\nconst AsyncTree = () => {\n  const [treeData, setTreeData] = useState(initTreeDate);\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTimeout(() => {\n        setTreeData(origin => updateTreeData(origin, key, [{\n          title: 'Child Node',\n          key: `${key}-0`\n        }, {\n          title: 'Child Node',\n          key: `${key}-1`\n        }]));\n        resolve();\n      }, 1000);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(_Tree, {\n    loadData: onLoadData,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default AsyncTree;","map":{"version":3,"sources":["/home/tht-hieu/Desktop/template-copy/shared/containers/UIElements/Tree/AsyncTree.js"],"names":["React","useState","TreeNode","initTreeDate","title","key","isLeaf","updateTreeData","list","children","map","node","AsyncTree","treeData","setTreeData","onLoadData","Promise","resolve","setTimeout","origin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,MAAM;AAAEC,EAAAA;AAAF,SAAN;AACA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CADmB,EAKnB;AACED,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CALmB,EASnB;AACED,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,GAAG,EAAE,GAFP;AAGEC,EAAAA,MAAM,EAAE;AAHV,CATmB,CAArB,C,CAcG;;AAEH,SAASC,cAAT,CAAwBC,IAAxB,EAA8BH,GAA9B,EAAmCI,QAAnC,EAA6C;AAC3C,SAAOD,IAAI,CAACE,GAAL,CAAUC,IAAD,IAAU;AACxB,QAAIA,IAAI,CAACN,GAAL,KAAaA,GAAjB,EAAsB;AACpB,aAAO,EAAE,GAAGM,IAAL;AAAWF,QAAAA;AAAX,OAAP;AACD;;AACD,QAAIE,IAAI,CAACF,QAAT,EAAmB;AACjB,aAAO,EACL,GAAGE,IADE;AAELF,QAAAA,QAAQ,EAAEF,cAAc,CAACI,IAAI,CAACF,QAAN,EAAgBJ,GAAhB,EAAqBI,QAArB;AAFnB,OAAP;AAID;;AAED,WAAOE,IAAP;AACD,GAZM,CAAP;AAaD;;AAED,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACE,YAAD,CAAxC;;AAEA,WAASY,UAAT,CAAoB;AAAEV,IAAAA,GAAF;AAAOI,IAAAA;AAAP,GAApB,EAAuC;AACrC,WAAO,IAAIO,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAIR,QAAJ,EAAc;AACZQ,QAAAA,OAAO;AACP;AACD;;AAEDC,MAAAA,UAAU,CAAC,MAAM;AACfJ,QAAAA,WAAW,CAAEK,MAAD,IACVZ,cAAc,CAACY,MAAD,EAASd,GAAT,EAAc,CAC1B;AACED,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,GAAG,EAAG,GAAEA,GAAI;AAFd,SAD0B,EAK1B;AACED,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,GAAG,EAAG,GAAEA,GAAI;AAFd,SAL0B,CAAd,CADL,CAAX;AAYAY,QAAAA,OAAO;AACR,OAdS,EAcP,IAdO,CAAV;AAeD,KArBM,CAAP;AAsBD;;AAED,sBAAO;AAAM,IAAA,QAAQ,EAAEF,UAAhB;AAA4B,IAAA,QAAQ,EAAEF,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA7BD;;AA+BA,eAAeD,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Tree } from 'antd';\n\nconst { TreeNode } = Tree;\nconst initTreeDate = [\n  {\n    title: 'Expand to load',\n    key: '0',\n  },\n  {\n    title: 'Expand to load',\n    key: '1',\n  },\n  {\n    title: 'Tree Node',\n    key: '2',\n    isLeaf: true,\n  },\n]; // It's just a simple demo. You can use tree map to optimize update perf.\n\nfunction updateTreeData(list, key, children) {\n  return list.map((node) => {\n    if (node.key === key) {\n      return { ...node, children };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, children),\n      };\n    }\n\n    return node;\n  });\n}\n\nconst AsyncTree = () => {\n  const [treeData, setTreeData] = useState(initTreeDate);\n\n  function onLoadData({ key, children }) {\n    return new Promise((resolve) => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      setTimeout(() => {\n        setTreeData((origin) =>\n          updateTreeData(origin, key, [\n            {\n              title: 'Child Node',\n              key: `${key}-0`,\n            },\n            {\n              title: 'Child Node',\n              key: `${key}-1`,\n            },\n          ])\n        );\n        resolve();\n      }, 1000);\n    });\n  }\n\n  return <Tree loadData={onLoadData} treeData={treeData} />;\n};\n\nexport default AsyncTree;\n"]},"metadata":{},"sourceType":"module"}