{"ast":null,"code":"import quizActions from './actions';\nimport { arrayEqual } from '@iso/lib/helpers/utility';\nconst initialState = {\n  quizes: {},\n  questions: {},\n  gettingStarted: false,\n  activeQuestion: 0,\n  total: 0,\n  correct: 0,\n  wrong: 0,\n  submitted: false,\n  answers: false\n};\nexport default function questionReducer(state = initialState, action) {\n  switch (action.type) {\n    case quizActions.START_QUIZ:\n      return { ...state,\n        gettingStarted: true\n      };\n\n    case quizActions.SET_QUIZ_DATA:\n      return { ...state,\n        quizes: action.payload,\n        gettingStarted: false\n      };\n\n    case quizActions.SET_QUESTION_DATA:\n      return { ...state,\n        questions: action.payload,\n        total: action.payload.total\n      };\n\n    case quizActions.SET_QUESTION_ANSWER:\n      const {\n        questions,\n        activeQuestion,\n        correct,\n        wrong\n      } = state;\n      const currentQuizz = questions.data[activeQuestion];\n      let rightAnswer = false;\n\n      if (Array.isArray(action.payload)) {\n        rightAnswer = arrayEqual(action.payload, currentQuizz['answers']);\n      } else {\n        rightAnswer = currentQuizz['answers'] === action.payload ? true : false;\n      }\n\n      let correctAnswer = rightAnswer ? correct + 1 : correct;\n      let wrongAnswer = !rightAnswer ? wrong + 1 : wrong;\n      return { ...state,\n        correct: correctAnswer,\n        wrong: wrongAnswer,\n        submitted: true,\n        answers: rightAnswer,\n        questions: {\n          data: [...questions.data.slice(0, activeQuestion), { ...questions.data[activeQuestion],\n            showAnswer: true\n          }, ...questions.data.slice(activeQuestion + 1)]\n        }\n      };\n\n    case quizActions.NEXT_QUESTION:\n      return { ...state,\n        activeQuestion: state.activeQuestion + 1,\n        submitted: false,\n        answers: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/tht-hieu/Desktop/recipe-project/shared/redux/quiz/reducer.js"],"names":["quizActions","arrayEqual","initialState","quizes","questions","gettingStarted","activeQuestion","total","correct","wrong","submitted","answers","questionReducer","state","action","type","START_QUIZ","SET_QUIZ_DATA","payload","SET_QUESTION_DATA","SET_QUESTION_ANSWER","currentQuizz","data","rightAnswer","Array","isArray","correctAnswer","wrongAnswer","slice","showAnswer","NEXT_QUESTION"],"mappings":"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","sourcesContent":["import quizActions from './actions';\nimport { arrayEqual } from '@iso/lib/helpers/utility';\nconst initialState = {\n  quizes: {},\n  questions: {},\n  gettingStarted: false,\n  activeQuestion: 0,\n  total: 0,\n  correct: 0,\n  wrong: 0,\n  submitted: false,\n  answers: false,\n};\n\nexport default function questionReducer(state = initialState, action) {\n  switch (action.type) {\n    case quizActions.START_QUIZ:\n      return { ...state, gettingStarted: true };\n    case quizActions.SET_QUIZ_DATA:\n      return { ...state, quizes: action.payload, gettingStarted: false };\n    case quizActions.SET_QUESTION_DATA:\n      return {\n        ...state,\n        questions: action.payload,\n        total: action.payload.total,\n      };\n    case quizActions.SET_QUESTION_ANSWER:\n      const { questions, activeQuestion, correct, wrong } = state;\n      const currentQuizz = questions.data[activeQuestion];\n      let rightAnswer = false;\n      if (Array.isArray(action.payload)) {\n        rightAnswer = arrayEqual(action.payload, currentQuizz['answers']);\n      } else {\n        rightAnswer = currentQuizz['answers'] === action.payload ? true : false;\n      }\n      let correctAnswer = rightAnswer ? correct + 1 : correct;\n      let wrongAnswer = !rightAnswer ? wrong + 1 : wrong;\n      return {\n        ...state,\n        correct: correctAnswer,\n        wrong: wrongAnswer,\n        submitted: true,\n        answers: rightAnswer,\n        questions: {\n          data: [\n            ...questions.data.slice(0, activeQuestion),\n            {\n              ...questions.data[activeQuestion],\n              showAnswer: true,\n            },\n            ...questions.data.slice(activeQuestion + 1),\n          ],\n        },\n      };\n    case quizActions.NEXT_QUESTION:\n      return {\n        ...state,\n        activeQuestion: state.activeQuestion + 1,\n        submitted: false,\n        answers: false,\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}