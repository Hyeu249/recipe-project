{"ast":null,"code":"var _jsxFileName = \"/home/tht-hieu/Desktop/template-copy/shared/containers/ScrumBoard/Task/TaskCreateOrUpdate/TaskCreateOrUpdate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport moment from 'moment';\nimport { v4 as uuidV4 } from 'uuid';\nimport RenderTaskForm from './RenderCreateTaskForm/RenderCreateTaskForm';\nimport { dateFormat } from '@iso/components/ScrumBoard/FieldFormats';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport { CreateTaskWrapper } from './TaskCreateOrUpdate.style';\nconst initialValues = {\n  id: '',\n  title: '',\n  description: '',\n  labels: [],\n  assignees: [],\n  attachments: [],\n  comments: [],\n  todos: [],\n  column_id: '',\n  editing: false,\n  created_at: moment(Date.now()),\n  updated_at: moment(Date.now()),\n  due_date: moment(Date.now()),\n  selectOptions: ['success', 'error', 'processing', 'warning', 'default'],\n  selectAssignees: ['Mark', 'Bob', 'Anthony']\n};\n\nconst TaskForm = props => {\n  const initials = { ...initialValues,\n    ...props.initials,\n    due_date: moment(props.initials && props.initials.due_date ? props.initials.due_date : Date.now()),\n    updated_at: moment(Date.now())\n  };\n\n  const handleSubmit = formProps => {\n    if (!formProps.editing) {\n      formProps.id = uuidV4();\n      formProps.column_id = props.columnId;\n      formProps.editing = false;\n      formProps.created_at = moment(formProps.created_at).format(dateFormat).toString();\n    }\n\n    props.createOrUpdateTaskWatcher({ ...formProps,\n      due_date: moment(formProps.due_date).format(dateFormat).toString(),\n      updated_at: moment(formProps.updated_at).format(dateFormat).toString()\n    });\n    props.closeDrawer();\n  };\n\n  return /*#__PURE__*/React.createElement(CreateTaskWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initials,\n    onSubmit: handleSubmit,\n    render: formikProps => /*#__PURE__*/React.createElement(RenderTaskForm, Object.assign({}, formikProps, {\n      onCancel: props.closeDrawer,\n      onDelete: () => {\n        props.deleteTask({\n          taskId: props.initials.id,\n          column_id: props.columnId\n        });\n        props.closeDrawer();\n      },\n      onEditCancel: () => {\n        props.cancelEditTask(props.initials);\n        props.openDrawer({\n          drawerType: 'CARD_DETAILS',\n          drawerProps: {\n            task: { ...props.initials\n            },\n            columnId: props.columnId\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default connect(null, { ...scrumBoardActions\n})(TaskForm);","map":{"version":3,"sources":["/home/tht-hieu/Desktop/template-copy/shared/containers/ScrumBoard/Task/TaskCreateOrUpdate/TaskCreateOrUpdate.js"],"names":["React","connect","Formik","moment","v4","uuidV4","RenderTaskForm","dateFormat","scrumBoardActions","CreateTaskWrapper","initialValues","id","title","description","labels","assignees","attachments","comments","todos","column_id","editing","created_at","Date","now","updated_at","due_date","selectOptions","selectAssignees","TaskForm","props","initials","handleSubmit","formProps","columnId","format","toString","createOrUpdateTaskWatcher","closeDrawer","formikProps","deleteTask","taskId","cancelEditTask","openDrawer","drawerType","drawerProps","task"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,cAAP,MAA2B,6CAA3B;AACA,SAASC,UAAT,QAA2B,yCAA3B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,EAAE,EAAE,EADgB;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBC,EAAAA,WAAW,EAAE,EAHO;AAIpBC,EAAAA,MAAM,EAAE,EAJY;AAKpBC,EAAAA,SAAS,EAAE,EALS;AAMpBC,EAAAA,WAAW,EAAE,EANO;AAOpBC,EAAAA,QAAQ,EAAE,EAPU;AAQpBC,EAAAA,KAAK,EAAE,EARa;AASpBC,EAAAA,SAAS,EAAE,EATS;AAUpBC,EAAAA,OAAO,EAAE,KAVW;AAWpBC,EAAAA,UAAU,EAAElB,MAAM,CAACmB,IAAI,CAACC,GAAL,EAAD,CAXE;AAYpBC,EAAAA,UAAU,EAAErB,MAAM,CAACmB,IAAI,CAACC,GAAL,EAAD,CAZE;AAapBE,EAAAA,QAAQ,EAAEtB,MAAM,CAACmB,IAAI,CAACC,GAAL,EAAD,CAbI;AAcpBG,EAAAA,aAAa,EAAE,CAAC,SAAD,EAAY,OAAZ,EAAqB,YAArB,EAAmC,SAAnC,EAA8C,SAA9C,CAdK;AAepBC,EAAAA,eAAe,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,SAAhB;AAfG,CAAtB;;AAkBA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,QAAQ,GAAG,EACf,GAAGpB,aADY;AAEf,OAAGmB,KAAK,CAACC,QAFM;AAGfL,IAAAA,QAAQ,EAAEtB,MAAM,CACd0B,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeL,QAAjC,GACII,KAAK,CAACC,QAAN,CAAeL,QADnB,GAEIH,IAAI,CAACC,GAAL,EAHU,CAHD;AAQfC,IAAAA,UAAU,EAAErB,MAAM,CAACmB,IAAI,CAACC,GAAL,EAAD;AARH,GAAjB;;AAWA,QAAMQ,YAAY,GAAIC,SAAD,IAAe;AAClC,QAAI,CAACA,SAAS,CAACZ,OAAf,EAAwB;AACtBY,MAAAA,SAAS,CAACrB,EAAV,GAAeN,MAAM,EAArB;AACA2B,MAAAA,SAAS,CAACb,SAAV,GAAsBU,KAAK,CAACI,QAA5B;AACAD,MAAAA,SAAS,CAACZ,OAAV,GAAoB,KAApB;AACAY,MAAAA,SAAS,CAACX,UAAV,GAAuBlB,MAAM,CAAC6B,SAAS,CAACX,UAAX,CAAN,CACpBa,MADoB,CACb3B,UADa,EAEpB4B,QAFoB,EAAvB;AAGD;;AAEDN,IAAAA,KAAK,CAACO,yBAAN,CAAgC,EAC9B,GAAGJ,SAD2B;AAE9BP,MAAAA,QAAQ,EAAEtB,MAAM,CAAC6B,SAAS,CAACP,QAAX,CAAN,CAA2BS,MAA3B,CAAkC3B,UAAlC,EAA8C4B,QAA9C,EAFoB;AAG9BX,MAAAA,UAAU,EAAErB,MAAM,CAAC6B,SAAS,CAACR,UAAX,CAAN,CAA6BU,MAA7B,CAAoC3B,UAApC,EAAgD4B,QAAhD;AAHkB,KAAhC;AAKAN,IAAAA,KAAK,CAACQ,WAAN;AACD,GAhBD;;AAkBA,sBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAEP,QADjB;AAEE,IAAA,QAAQ,EAAEC,YAFZ;AAGE,IAAA,MAAM,EAAGO,WAAD,iBACN,oBAAC,cAAD,oBACMA,WADN;AAEE,MAAA,QAAQ,EAAET,KAAK,CAACQ,WAFlB;AAGE,MAAA,QAAQ,EAAE,MAAM;AACdR,QAAAA,KAAK,CAACU,UAAN,CAAiB;AACfC,UAAAA,MAAM,EAAEX,KAAK,CAACC,QAAN,CAAenB,EADR;AAEfQ,UAAAA,SAAS,EAAEU,KAAK,CAACI;AAFF,SAAjB;AAIAJ,QAAAA,KAAK,CAACQ,WAAN;AACD,OATH;AAUE,MAAA,YAAY,EAAE,MAAM;AAClBR,QAAAA,KAAK,CAACY,cAAN,CAAqBZ,KAAK,CAACC,QAA3B;AACAD,QAAAA,KAAK,CAACa,UAAN,CAAiB;AACfC,UAAAA,UAAU,EAAE,cADG;AAEfC,UAAAA,WAAW,EAAE;AACXC,YAAAA,IAAI,EAAE,EAAE,GAAGhB,KAAK,CAACC;AAAX,aADK;AAEXG,YAAAA,QAAQ,EAAEJ,KAAK,CAACI;AAFL;AAFE,SAAjB;AAOD,OAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA+BD,CA7DD;;AA8DA,eAAehC,OAAO,CAAC,IAAD,EAAO,EAC3B,GAAGO;AADwB,CAAP,CAAP,CAEZoB,QAFY,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport moment from 'moment';\nimport { v4 as uuidV4 } from 'uuid';\nimport RenderTaskForm from './RenderCreateTaskForm/RenderCreateTaskForm';\nimport { dateFormat } from '@iso/components/ScrumBoard/FieldFormats';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport { CreateTaskWrapper } from './TaskCreateOrUpdate.style';\n\nconst initialValues = {\n  id: '',\n  title: '',\n  description: '',\n  labels: [],\n  assignees: [],\n  attachments: [],\n  comments: [],\n  todos: [],\n  column_id: '',\n  editing: false,\n  created_at: moment(Date.now()),\n  updated_at: moment(Date.now()),\n  due_date: moment(Date.now()),\n  selectOptions: ['success', 'error', 'processing', 'warning', 'default'],\n  selectAssignees: ['Mark', 'Bob', 'Anthony'],\n};\n\nconst TaskForm = (props) => {\n  const initials = {\n    ...initialValues,\n    ...props.initials,\n    due_date: moment(\n      props.initials && props.initials.due_date\n        ? props.initials.due_date\n        : Date.now()\n    ),\n    updated_at: moment(Date.now()),\n  };\n\n  const handleSubmit = (formProps) => {\n    if (!formProps.editing) {\n      formProps.id = uuidV4();\n      formProps.column_id = props.columnId;\n      formProps.editing = false;\n      formProps.created_at = moment(formProps.created_at)\n        .format(dateFormat)\n        .toString();\n    }\n\n    props.createOrUpdateTaskWatcher({\n      ...formProps,\n      due_date: moment(formProps.due_date).format(dateFormat).toString(),\n      updated_at: moment(formProps.updated_at).format(dateFormat).toString(),\n    });\n    props.closeDrawer();\n  };\n\n  return (\n    <CreateTaskWrapper>\n      <Formik\n        initialValues={initials}\n        onSubmit={handleSubmit}\n        render={(formikProps) => (\n          <RenderTaskForm\n            {...formikProps}\n            onCancel={props.closeDrawer}\n            onDelete={() => {\n              props.deleteTask({\n                taskId: props.initials.id,\n                column_id: props.columnId,\n              });\n              props.closeDrawer();\n            }}\n            onEditCancel={() => {\n              props.cancelEditTask(props.initials);\n              props.openDrawer({\n                drawerType: 'CARD_DETAILS',\n                drawerProps: {\n                  task: { ...props.initials },\n                  columnId: props.columnId,\n                },\n              });\n            }}\n          />\n        )}\n      />\n    </CreateTaskWrapper>\n  );\n};\nexport default connect(null, {\n  ...scrumBoardActions,\n})(TaskForm);\n"]},"metadata":{},"sourceType":"module"}