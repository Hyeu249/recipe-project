{"ast":null,"code":"import \"antd/es/tree/style/css\";\nimport _Tree from \"antd/es/tree\";\nvar _jsxFileName = \"/home/tht-hieu/Desktop/recipe-project/shared/containers/UIElements/Tree/DraggableTree.js\";\nimport React from 'react';\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n  const children = [];\n\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({\n      title: key,\n      key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\n\nclass DraggableTree extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gData,\n      expandedKeys: ['0-0', '0-0-0', '0-0-0-0']\n    };\n\n    this.onDragEnter = info => {\n      console.log(info); // expandedKeys 需要受控时设置\n      // this.setState({\n      //   expandedKeys: info.expandedKeys,\n      // });\n    };\n\n    this.onDrop = info => {\n      console.log(info);\n      const dropKey = info.node.props.eventKey;\n      const dragKey = info.dragNode.props.eventKey;\n      const dropPos = info.node.props.pos.split('-');\n      const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n      const loop = (data, key, callback) => {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].key === key) {\n            return callback(data[i], i, data);\n          }\n\n          if (data[i].children) {\n            loop(data[i].children, key, callback);\n          }\n        }\n      };\n\n      const data = [...this.state.gData]; // Find dragObject\n\n      let dragObj;\n      loop(data, dragKey, (item, index, arr) => {\n        arr.splice(index, 1);\n        dragObj = item;\n      });\n\n      if (!info.dropToGap) {\n        // Drop on the content\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert 示例添加到尾部，可以是随意位置\n\n          item.children.push(dragObj);\n        });\n      } else if ((info.node.props.children || []).length > 0 && // Has children\n      info.node.props.expanded && // Is expanded\n      dropPosition === 1 // On the bottom gap\n      ) {\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert 示例添加到头部，可以是随意位置\n\n          item.children.unshift(dragObj);\n        });\n      } else {\n        let ar;\n        let i;\n        loop(data, dropKey, (item, index, arr) => {\n          ar = arr;\n          i = index;\n        });\n\n        if (dropPosition === -1) {\n          ar.splice(i, 0, dragObj);\n        } else {\n          ar.splice(i + 1, 0, dragObj);\n        }\n      }\n\n      this.setState({\n        gData: data\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(_Tree, {\n      className: \"draggable-tree\",\n      defaultExpandedKeys: this.state.expandedKeys,\n      draggable: true,\n      blockNode: true,\n      onDragEnter: this.onDragEnter,\n      onDrop: this.onDrop,\n      treeData: this.state.gData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default DraggableTree;","map":{"version":3,"sources":["/home/tht-hieu/Desktop/recipe-project/shared/containers/UIElements/Tree/DraggableTree.js"],"names":["React","x","y","z","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","DraggableTree","Component","state","expandedKeys","onDragEnter","info","console","log","onDrop","dropKey","node","props","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","length","loop","data","callback","dragObj","item","arr","splice","dropToGap","expanded","unshift","ar","setState","render"],"mappings":"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","sourcesContent":["import { Tree } from 'antd';\nimport React from 'react';\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass DraggableTree extends React.Component {\n  state = {\n    gData,\n    expandedKeys: ['0-0', '0-0-0', '0-0-0-0'],\n  };\n\n  onDragEnter = (info) => {\n    console.log(info);\n    // expandedKeys 需要受控时设置\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  };\n\n  onDrop = (info) => {\n    console.log(info);\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition =\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].key === key) {\n          return callback(data[i], i, data);\n        }\n        if (data[i].children) {\n          loop(data[i].children, key, callback);\n        }\n      }\n    };\n    const data = [...this.state.gData];\n\n    // Find dragObject\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      // Drop on the content\n      loop(data, dropKey, (item) => {\n        item.children = item.children || [];\n        // where to insert 示例添加到尾部，可以是随意位置\n        item.children.push(dragObj);\n      });\n    } else if (\n      (info.node.props.children || []).length > 0 && // Has children\n      info.node.props.expanded && // Is expanded\n      dropPosition === 1 // On the bottom gap\n    ) {\n      loop(data, dropKey, (item) => {\n        item.children = item.children || [];\n        // where to insert 示例添加到头部，可以是随意位置\n        item.children.unshift(dragObj);\n      });\n    } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    }\n\n    this.setState({\n      gData: data,\n    });\n  };\n\n  render() {\n    return (\n      <Tree\n        className=\"draggable-tree\"\n        defaultExpandedKeys={this.state.expandedKeys}\n        draggable\n        blockNode\n        onDragEnter={this.onDragEnter}\n        onDrop={this.onDrop}\n        treeData={this.state.gData}\n      />\n    );\n  }\n}\n\nexport default DraggableTree;\n"]},"metadata":{},"sourceType":"module"}