{"ast":null,"code":"import \"antd/es/tree/style/css\";\nimport _Tree from \"antd/es/tree\";\nvar _jsxFileName = \"/home/tht-hieu/Desktop/isomorphic-all-playAround/shared/containers/UIElements/Tree/BasicControlledTree.js\";\nimport React, { useState } from 'react';\nconst {\n  TreeNode\n} = _Tree;\nconst treeData = [{\n  title: '0-0',\n  key: '0-0',\n  children: [{\n    title: '0-0-0',\n    key: '0-0-0',\n    children: [{\n      title: '0-0-0-0',\n      key: '0-0-0-0'\n    }, {\n      title: '0-0-0-1',\n      key: '0-0-0-1'\n    }, {\n      title: '0-0-0-2',\n      key: '0-0-0-2'\n    }]\n  }, {\n    title: '0-0-1',\n    key: '0-0-1',\n    children: [{\n      title: '0-0-1-0',\n      key: '0-0-1-0'\n    }, {\n      title: '0-0-1-1',\n      key: '0-0-1-1'\n    }, {\n      title: '0-0-1-2',\n      key: '0-0-1-2'\n    }]\n  }, {\n    title: '0-0-2',\n    key: '0-0-2'\n  }]\n}, {\n  title: '0-1',\n  key: '0-1',\n  children: [{\n    title: '0-1-0-0',\n    key: '0-1-0-0'\n  }, {\n    title: '0-1-0-1',\n    key: '0-1-0-1'\n  }, {\n    title: '0-1-0-2',\n    key: '0-1-0-2'\n  }]\n}, {\n  title: '0-2',\n  key: '0-2'\n}];\n\nconst ControlledTree = () => {\n  const [expandedKeys, setExpandedKeys] = useState(['0-0-0', '0-0-1']);\n  const [checkedKeys, setCheckedKeys] = useState(['0-0-0']);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n\n  const onExpand = expandedKeys => {\n    console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const onCheck = checkedKeys => {\n    console.log('onCheck', checkedKeys);\n    setCheckedKeys(checkedKeys);\n  };\n\n  const onSelect = (selectedKeys, info) => {\n    console.log('onSelect', info);\n    setSelectedKeys(selectedKeys);\n  };\n\n  return /*#__PURE__*/React.createElement(_Tree, {\n    checkable: true,\n    onExpand: onExpand,\n    expandedKeys: expandedKeys,\n    autoExpandParent: autoExpandParent,\n    onCheck: onCheck,\n    checkedKeys: checkedKeys,\n    onSelect: onSelect,\n    selectedKeys: selectedKeys,\n    treeData: treeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ControlledTree;","map":{"version":3,"sources":["/home/tht-hieu/Desktop/isomorphic-all-playAround/shared/containers/UIElements/Tree/BasicControlledTree.js"],"names":["React","useState","TreeNode","treeData","title","key","children","ControlledTree","expandedKeys","setExpandedKeys","checkedKeys","setCheckedKeys","selectedKeys","setSelectedKeys","autoExpandParent","setAutoExpandParent","onExpand","console","log","onCheck","onSelect","info"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,MAAM;AAAEC,EAAAA;AAAF,SAAN;AACA,MAAMC,QAAQ,GAAG,CACf;AACEC,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,GAAG,EAAE,KAFP;AAGEC,EAAAA,QAAQ,EAAE,CACR;AACEF,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,GAAG,EAAE,OAFP;AAGEC,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACED,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KALQ,EASR;AACED,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KATQ;AAHZ,GADQ,EAmBR;AACED,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,GAAG,EAAE,OAFP;AAGEC,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACED,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KALQ,EASR;AACED,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KATQ;AAHZ,GAnBQ,EAqCR;AACED,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,GAAG,EAAE;AAFP,GArCQ;AAHZ,CADe,EA+Cf;AACED,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,GAAG,EAAE,KAFP;AAGEC,EAAAA,QAAQ,EAAE,CACR;AACEF,IAAAA,KAAK,EAAE,SADT;AAEEC,IAAAA,GAAG,EAAE;AAFP,GADQ,EAKR;AACED,IAAAA,KAAK,EAAE,SADT;AAEEC,IAAAA,GAAG,EAAE;AAFP,GALQ,EASR;AACED,IAAAA,KAAK,EAAE,SADT;AAEEC,IAAAA,GAAG,EAAE;AAFP,GATQ;AAHZ,CA/Ce,EAiEf;AACED,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,GAAG,EAAE;AAFP,CAjEe,CAAjB;;AAuEA,MAAME,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,CAAC,OAAD,EAAU,OAAV,CAAD,CAAhD;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAC,OAAD,CAAD,CAA9C;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,IAAD,CAAxD;;AAEA,QAAMe,QAAQ,GAAIR,YAAD,IAAkB;AACjCS,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBV,YAAxB,EADiC,CACM;AACvC;;AAEAC,IAAAA,eAAe,CAACD,YAAD,CAAf;AACAO,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAND;;AAQA,QAAMI,OAAO,GAAIT,WAAD,IAAiB;AAC/BO,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,WAAvB;AACAC,IAAAA,cAAc,CAACD,WAAD,CAAd;AACD,GAHD;;AAKA,QAAMU,QAAQ,GAAG,CAACR,YAAD,EAAeS,IAAf,KAAwB;AACvCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,IAAxB;AACAR,IAAAA,eAAe,CAACD,YAAD,CAAf;AACD,GAHD;;AAKA,sBACE;AACE,IAAA,SAAS,MADX;AAEE,IAAA,QAAQ,EAAEI,QAFZ;AAGE,IAAA,YAAY,EAAER,YAHhB;AAIE,IAAA,gBAAgB,EAAEM,gBAJpB;AAKE,IAAA,OAAO,EAAEK,OALX;AAME,IAAA,WAAW,EAAET,WANf;AAOE,IAAA,QAAQ,EAAEU,QAPZ;AAQE,IAAA,YAAY,EAAER,YARhB;AASE,IAAA,QAAQ,EAAET,QATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAaD,CArCD;;AAsCA,eAAeI,cAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Tree } from 'antd';\n\nconst { TreeNode } = Tree;\nconst treeData = [\n  {\n    title: '0-0',\n    key: '0-0',\n    children: [\n      {\n        title: '0-0-0',\n        key: '0-0-0',\n        children: [\n          {\n            title: '0-0-0-0',\n            key: '0-0-0-0',\n          },\n          {\n            title: '0-0-0-1',\n            key: '0-0-0-1',\n          },\n          {\n            title: '0-0-0-2',\n            key: '0-0-0-2',\n          },\n        ],\n      },\n      {\n        title: '0-0-1',\n        key: '0-0-1',\n        children: [\n          {\n            title: '0-0-1-0',\n            key: '0-0-1-0',\n          },\n          {\n            title: '0-0-1-1',\n            key: '0-0-1-1',\n          },\n          {\n            title: '0-0-1-2',\n            key: '0-0-1-2',\n          },\n        ],\n      },\n      {\n        title: '0-0-2',\n        key: '0-0-2',\n      },\n    ],\n  },\n  {\n    title: '0-1',\n    key: '0-1',\n    children: [\n      {\n        title: '0-1-0-0',\n        key: '0-1-0-0',\n      },\n      {\n        title: '0-1-0-1',\n        key: '0-1-0-1',\n      },\n      {\n        title: '0-1-0-2',\n        key: '0-1-0-2',\n      },\n    ],\n  },\n  {\n    title: '0-2',\n    key: '0-2',\n  },\n];\n\nconst ControlledTree = () => {\n  const [expandedKeys, setExpandedKeys] = useState(['0-0-0', '0-0-1']);\n  const [checkedKeys, setCheckedKeys] = useState(['0-0-0']);\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n\n  const onExpand = (expandedKeys) => {\n    console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const onCheck = (checkedKeys) => {\n    console.log('onCheck', checkedKeys);\n    setCheckedKeys(checkedKeys);\n  };\n\n  const onSelect = (selectedKeys, info) => {\n    console.log('onSelect', info);\n    setSelectedKeys(selectedKeys);\n  };\n\n  return (\n    <Tree\n      checkable\n      onExpand={onExpand}\n      expandedKeys={expandedKeys}\n      autoExpandParent={autoExpandParent}\n      onCheck={onCheck}\n      checkedKeys={checkedKeys}\n      onSelect={onSelect}\n      selectedKeys={selectedKeys}\n      treeData={treeData}\n    />\n  );\n};\nexport default ControlledTree;\n"]},"metadata":{},"sourceType":"module"}